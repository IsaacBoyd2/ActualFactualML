# -*- coding: utf-8 -*-
"""model

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oulo0zWyjsp8sVvyfm_59FfD6qrhr925
"""

#-----------------------imports-------------------------
import pandas as pd
import numpy as np
import requests

df = pd.read_csv('https://github.com/IsaacBoyd2/ActualFactualML/blob/main/Project2/Data/glass.csv?raw=true')

df_matrix = pd.DataFrame(np.nan, index=range(len(df)), columns = range(len(df)))


df = df.drop(0)
df = df.reset_index()

for count1 in range(len(df)):
    base = df.iloc[count1]
    if count1 > 0:
      df_editted = df.drop(count1)
      df_editted = df_editted.drop(0)
      df_editted = df_editted.reset_index()
      for count2 in range(len(df_editted)):
        dist1 = []
        for count3 in range(len(df.columns)):
          dist1.append((base[count3] - df_editted.iloc[count2][count3])**2)
        summation = sum(dist1)
        distance = np.sqrt(summation)
        
        df_matrix.loc[count1, count2] = distance



#Next we get the smallest values in the rows
#Then we find the associated slice for the mins.
#Then we find the associated classes
#Then we do a majority vote and classify.
#Then we find loss.


 

#For each slice. Find the distance between all other points. 

#Slice 1: dif 1,dif2, ... , dif99
#Slide 2:
#Slide 3:
#...
#Slice 99:

df_matrix

base

df[:1]

for i in df:
  print(i)