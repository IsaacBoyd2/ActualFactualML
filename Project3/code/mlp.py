# -*- coding: utf-8 -*-
"""MLP

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dwf0r1cKY5zK6ak1YRLF91cDNjIARAAo
"""

import pandas as pd
import numpy as np
from scipy import stats as st
import requests
import os
import random as random
import sys


class Model:

  def __init__(self):
    df = pd.DataFrame
    predictions = []
    labels = []
    
  def run(self, input_size, hidden_sizes, output_size):  
    #Initilize the network to have random weights between 0 and 1.

    mlp_init = []   #The network

    #Input
    hidden_nodes = []
    for i in range(input_size):
      hidden_node = []
      for i in range(hidden_sizes[0]):
        hidden_node.append(random.random())
      hidden_nodes.append(hidden_node)

    mlp_init.append(hidden_nodes)

    #Init number of weights between each hidden layer
    for sizes in range(len(hidden_sizes)-1):
      hidden_nodes = []
      for i in range(hidden_sizes[1+sizes]):
        hidden_node = []
        for i in range(hidden_sizes[0+sizes]):
          hidden_node.append(random.random())
        hidden_nodes.append(hidden_node)

      mlp_init.append(hidden_nodes)

    #output layer
    output_nodes = []
    for i in range(hidden_sizes[-1]):
      output_node = []
      for i in range(output_size):
        output_node.append(random.random())
      output_nodes.append(output_node)
    
    
    mlp_init.append(output_nodes)

    print(mlp_init)

modeling = Model()
modeling.run(2, [2,3,2], 2)